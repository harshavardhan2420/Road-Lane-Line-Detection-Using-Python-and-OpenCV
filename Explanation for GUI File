## Road Lane Line Detection Using Python and OpenCV
## gui.py file 

A GUI-based application to showcase real-time lane detection. Using **Tkinter** for the GUI and **OpenCV** for video processing, it demonstrates input and output video streams for lane-line detection in a user-friendly interface.  

## Table of Contents  

1. [Key Features](#key-features)  
2. [Technologies and Tools](#technologies-and-tools)  
3. [Project Workflow](#project-workflow)  
4. [Step-by-Step Explanation](#step-by-step-explanation)  
    - [1. Setting Up the GUI](#1-setting-up-the-gui)  
    - [2. Integrating Input Video](#2-integrating-input-video)  
    - [3. Displaying Processed Video](#3-displaying-processed-video)  
    - [4. Quit Button Implementation](#4-quit-button-implementation)  
5. [Installation](#installation)  
6. [Example Output](#example-output)  
7. [Applications](#applications)  
8. [Supporting Materials](#supporting-materials)  

## Key Features  

- Real-Time Display: Simultaneously displays input and output video streams side by side in the application window.  
- Dynamic Resizing: Adjusts video frame sizes to fit the GUI layout.  
- User-Friendly GUI: Built using Tkinter, providing an intuitive interface with a title, logo, and Quit button.  

---

## Technologies and Tools  

- Programming Language: Python  
- Libraries:  
  - [Tkinter](https://docs.python.org/3/library/tkinter.html): For creating the graphical user interface.  
  - [OpenCV](https://opencv.org/): For video processing and manipulation.  
  - [Pillow](https://pillow.readthedocs.io/): For handling images in the Tkinter GUI.  
  - [NumPy](https://numpy.org/): For numerical operations on video frames.  

---

## Project Workflow  

1. Import necessary libraries and set up the global variables for video streams.  
2. Design the GUI using Tkinter and embed the application logo, title, and placeholders for video streams.  
3. Integrate OpenCV to process and display the input and processed video streams in real-time.  
4. Add functionality for exiting the application with a Quit button.  

---

## Step-by-Step Explanation  

### 1. Setting Up the GUI  

- Objective: Create a Tkinter-based application window to hold all components like video displays and buttons.  
- Implementation:  
  - Use `Tk()` to create the main window and set the title and dimensions.  
  - Add a heading and a logo at the top using `Label()`.  
  - Use `pack()` to organize elements within the window.  

```python  
root = tk.Tk()  
img = ImageTk.PhotoImage(Image.open("logo.png"))  
heading = Label(root, image=img, text="Lane-Line Detection")  
heading.pack()  
heading2 = Label(root, text="Lane-Line Detection", pady=20, font=('arial', 45, 'bold'))  
heading2.pack()  
```  
### 2. Integrating Input Video  

- Objective: Load an input video stream and display it in the GUI.  
- Implementation:  
  - Open the video stream using OpenCV's `VideoCapture()`.  
  - Read frames from the video and resize them using `cv2.resize()`.  
  - Convert the frames from BGR to RGB and display them in the Tkinter window using `ImageTk.PhotoImage()`.  

```python  
cap1 = cv2.VideoCapture("./input2.mp4")  

def show_vid():  
    flag1, frame1 = cap1.read()  
    frame1 = cv2.resize(frame1, (600, 500))  
    if flag1:  
        pic = cv2.cvtColor(frame1, cv2.COLOR_BGR2RGB)  
        img = Image.fromarray(pic)  
        imgtk = ImageTk.PhotoImage(image=img)  
        lmain.imgtk = imgtk  
        lmain.configure(image=imgtk)  
        lmain.after(10, show_vid)  
```  

### 3. Displaying Processed Video  

- Objective: Show the output video stream with lane detection applied.  
- Implementation:  
  - Open the processed video using another `VideoCapture()` object.  
  - Follow the same steps as the input video for resizing and display.  

```python  
cap2 = cv2.VideoCapture("./output2.mp4")  

def show_vid2():  
    flag2, frame2 = cap2.read()  
    frame2 = cv2.resize(frame2, (600, 500))  
    if flag2:  
        pic2 = cv2.cvtColor(frame2, cv2.COLOR_BGR2RGB)  
        img2 = Image.fromarray(pic2)  
        img2tk = ImageTk.PhotoImage(image=img2)  
        lmain2.img2tk = img2tk  
        lmain2.configure(image=img2tk)  
        lmain2.after(10, show_vid2)  
```  

### 4. Quit Button Implementation  

- Objective: Provide a way to exit the application.  
- Implementation:  
  - Add a `Button()` widget with the `command` set to `root.destroy`.  
  - Position the button using `pack()` with the `side=BOTTOM` parameter.  

```python  
exitbutton = Button(root, text='Quit', fg="red", command=root.destroy).pack(side=BOTTOM)  
```  

---

## Installation  

1. Clone the repository:  
   ```bash  
   git clone https://github.com/your-username/lane-line-detection-gui.git  
   ```  

2. Install required libraries:  
   ```bash  
   pip install numpy opencv-python pillow  
   ```  

3. Run the application:  
   ```bash  
   python lane_detection_gui.py  
   ```
   
## Example Output  

The application window will display the input video on the left and the processed output video with detected lane lines on the right.  

## Applications  

- Showcasing lane-line detection projects in a GUI format.  
- Educational tools for computer vision and GUI programming.  
- Prototyping for autonomous driving systems.  

---

## Supporting Materials  

- [Tkinter Documentation](https://docs.python.org/3/library/tkinter.html)  
- [OpenCV Tutorials](https://opencv-python-tutroals.readthedocs.io/en/latest/)  
- [Pillow Documentation](https://pillow.readthedocs.io/)  

